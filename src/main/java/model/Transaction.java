package model;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.UUID;

/**
 * Positive amount = expense; negative = income/refund.
 * Supports both date-only (for summaries) and timestamp (for precise ordering).
 */
public class Transaction implements Comparable<Transaction> {
  private UUID transactionId;
  private UUID userId;
  private String description; 
  private double amount;
  private String category;
  private LocalDateTime timestamp;
  private LocalDate date;

  // ---------- Constructors ----------
  public Transaction() {
  }

  /** Create new transaction. 
   * Fields not passed as parameters re automatically generated by database. 
  */
  public Transaction(UUID userId, double amount, String category, String description) {
    this.userId = userId;
    this.amount = amount;
    this.category = category;
    setDescription(description);
  }

  // ---------- Getters / Setters ----------
  public UUID getTransactionId() { 
    return transactionId; 
  }

  public void setTransactionId(UUID id) { 
    this.transactionId = id; 
  }

  public UUID getUserId() { 
    return userId; 
  }

  public void setUserId(UUID id) {
    this.userId = id; 
  }

  public String getDescription() {
    return description; 
  }

  public void setDescription(String description) {
    this.description = (description == null) ? "" : description.trim();
  }

  public double getAmount() { 
    return amount; 
  }

  public void setAmount(double amount) { 
    this.amount = amount; 
  }

  public LocalDateTime getTimestamp() { 
    return timestamp; 
  }

  /** Set timestamp of transaction. */
  public void setTimestamp(LocalDateTime timestamp) {
    this.timestamp = (timestamp != null) ? timestamp : null;
    // Keep date in sync if possible
    if (this.timestamp != null) {
      this.date = this.timestamp.toLocalDate();
    }
  }

  public LocalDate getDate() { 
    return date; 
  }

  /** Set date of transaction. */
  public void setDate(LocalDate date) {
    this.date = (date != null) ? date : null;
    // If we have a date but no timestamp, set timestamp to start of that day
    if (this.date != null && this.timestamp == null) {
      this.timestamp = this.date.atStartOfDay();
    }
  }

  public String getCategory() { 
    return category; 
  }

  public void setCategory(String category) { 
    this.category = category; 
  }

  // ---------- Helpers ----------
  /** Preferred ordering instant: timestamp if present, else date at start-of-day, else null. */
  public LocalDateTime effectiveInstant() {
    if (timestamp != null) {
      return timestamp;
    }
    if (date != null) {
      return date.atStartOfDay();
    }
    return null;
  }

  // ---------- Comparable ----------
  @Override
  public int compareTo(Transaction other) {
    if (other == null) {
      return 1;
    }
    LocalDateTime a = this.effectiveInstant();
    LocalDateTime b = other.effectiveInstant();
    
    if (a == null && b == null) {
      UUID ai = this.transactionId;
      UUID bi = other.transactionId;
      if (ai == null && bi == null) {
        return 0;
      }
      if (ai == null) {
        return -1;
      }
      if (bi == null) {
        return 1;
      }
      return ai.compareTo(bi);
    }
    
    if (a == null) {
      return -1;
    }
    if (b == null) {
      return 1;
    }
    
    int cmp = a.compareTo(b);
    if (cmp != 0) {
      return cmp;
    }
    
    UUID ai = this.transactionId;
    UUID bi = other.transactionId;
    if (ai == null && bi == null) {
      return 0;
    }
    if (ai == null) {
      return -1;
    }
    if (bi == null) {
      return 1;
    }
    return ai.compareTo(bi);
  }

  // ---------- Equality / Hash / String ----------
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof Transaction)) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(transactionId, transaction.transactionId);
  }

  @Override
  public int hashCode() { 
    return Objects.hash(transactionId); 
  }

  @Override
  public String toString() {
    return "Transaction{"
            + "id=" + transactionId
            + ", description='" + description + '\''
            + ", amount=" + amount
            + ", timestamp=" + timestamp
            + ", date=" + date
            + ", category='" + category + '\''
            + '}';
  }
}
